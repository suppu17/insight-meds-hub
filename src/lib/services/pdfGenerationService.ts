import jsPDF from 'jspdf';

export interface SymptomEntry {
  id: string;
  concern: string;
  symptoms: string;
  timestamp: Date;
  severity?: 'mild' | 'moderate' | 'severe';
  autoSaved: boolean;
}

export interface PatientInfo {
  name?: string;
  dateOfBirth?: string;
  patientId?: string;
  reportDate: string;
}

export class PDFGenerationService {
  private doc: jsPDF;

  constructor() {
    this.doc = new jsPDF();
  }

  /**
   * Generate a comprehensive symptom report PDF
   */
  public generateSymptomReport(
    entries: SymptomEntry[],
    patientInfo?: PatientInfo
  ): { pdfBlob: Blob; fileName: string; shareableUrl: string } {
    this.doc = new jsPDF();
    
    // Set up document properties
    this.doc.setProperties({
      title: 'Symptom History Report',
      subject: 'Medical Symptom Tracking Report',
      author: 'MedInsight Hub',
      creator: 'MedInsight Hub - AI-Powered Health Platform'
    });

    this.addHeader();
    this.addPatientInfo(patientInfo);
    this.addReportSummary(entries);
    this.addSymptomEntries(entries);
    this.addFooter();

    // Generate blob and filename
    const pdfBlob = this.doc.output('blob');
    const fileName = this.generateFileName(patientInfo?.reportDate || new Date().toISOString());
    const shareableUrl = this.createShareableUrl(pdfBlob);

    return {
      pdfBlob,
      fileName,
      shareableUrl
    };
  }

  /**
   * Add header with logo and title
   */
  private addHeader(): void {
    const pageWidth = this.doc.internal.pageSize.getWidth();
    
    // Title
    this.doc.setFontSize(24);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(41, 128, 185); // Professional blue
    this.doc.text('SYMPTOM HISTORY REPORT', pageWidth / 2, 25, { align: 'center' });
    
    // Subtitle
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(100, 100, 100);
    this.doc.text('Generated by MedInsight Hub - AI-Powered Health Platform', pageWidth / 2, 35, { align: 'center' });
    
    // Horizontal line
    this.doc.setLineWidth(0.5);
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(20, 45, pageWidth - 20, 45);
  }

  /**
   * Add patient information section
   */
  private addPatientInfo(patientInfo?: PatientInfo): void {
    let yPosition = 60;
    
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Patient Information', 20, yPosition);
    
    yPosition += 15;
    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'normal');
    
    if (patientInfo?.name) {
      this.doc.text(`Patient Name: ${patientInfo.name}`, 25, yPosition);
      yPosition += 8;
    }
    
    if (patientInfo?.dateOfBirth) {
      this.doc.text(`Date of Birth: ${patientInfo.dateOfBirth}`, 25, yPosition);
      yPosition += 8;
    }
    
    if (patientInfo?.patientId) {
      this.doc.text(`Patient ID: ${patientInfo.patientId}`, 25, yPosition);
      yPosition += 8;
    }
    
    this.doc.text(`Report Generated: ${new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })}`, 25, yPosition);
    
    yPosition += 8;
    this.doc.text(`Total Entries: ${this.getTotalEntries()}`, 25, yPosition);
  }

  /**
   * Add report summary section
   */
  private addReportSummary(entries: SymptomEntry[]): void {
    let yPosition = 130;
    
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Report Summary', 20, yPosition);
    
    yPosition += 15;
    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'normal');
    
    // Summary statistics
    const severityCount = this.getSeverityBreakdown(entries);
    const dateRange = this.getDateRange(entries);
    const topConcerns = this.getTopConcerns(entries);
    
    this.doc.text(`Reporting Period: ${dateRange}`, 25, yPosition);
    yPosition += 8;
    
    this.doc.text('Severity Breakdown:', 25, yPosition);
    yPosition += 6;
    this.doc.text(`• Mild: ${severityCount.mild} entries`, 30, yPosition);
    yPosition += 6;
    this.doc.text(`• Moderate: ${severityCount.moderate} entries`, 30, yPosition);
    yPosition += 6;
    this.doc.text(`• Severe: ${severityCount.severe} entries`, 30, yPosition);
    yPosition += 10;
    
    if (topConcerns.length > 0) {
      this.doc.text('Most Common Concerns:', 25, yPosition);
      yPosition += 6;
      topConcerns.slice(0, 3).forEach(concern => {
        this.doc.text(`• ${concern}`, 30, yPosition);
        yPosition += 6;
      });
    }
  }

  /**
   * Add detailed symptom entries
   */
  private addSymptomEntries(entries: SymptomEntry[]): void {
    let yPosition = 220;
    const pageHeight = this.doc.internal.pageSize.getHeight();
    const pageWidth = this.doc.internal.pageSize.getWidth();
    
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Detailed Symptom Entries', 20, yPosition);
    
    yPosition += 20;
    
    entries.forEach((entry, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight - 60) {
        this.doc.addPage();
        yPosition = 30;
      }
      
      // Entry header with date and severity
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(0, 0, 0);
      
      const entryDate = entry.timestamp.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      this.doc.text(`Entry #${index + 1} - ${entryDate}`, 20, yPosition);
      
      // Severity badge
      const severityColor = this.getSeverityColor(entry.severity || 'mild');
      this.doc.setFillColor(severityColor.r, severityColor.g, severityColor.b);
      this.doc.roundedRect(pageWidth - 60, yPosition - 8, 35, 12, 2, 2, 'F');
      this.doc.setTextColor(255, 255, 255);
      this.doc.setFontSize(9);
      this.doc.text((entry.severity || 'mild').toUpperCase(), pageWidth - 42.5, yPosition - 2, { align: 'center' });
      
      yPosition += 15;
      
      // Concern
      this.doc.setFontSize(11);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(0, 0, 0);
      this.doc.text('Primary Concern:', 25, yPosition);
      yPosition += 8;
      
      this.doc.setFont('helvetica', 'normal');
      const concernLines = this.doc.splitTextToSize(entry.concern, pageWidth - 50);
      this.doc.text(concernLines, 30, yPosition);
      yPosition += concernLines.length * 6 + 5;
      
      // Symptoms
      this.doc.setFont('helvetica', 'bold');
      this.doc.text('Symptoms:', 25, yPosition);
      yPosition += 8;
      
      this.doc.setFont('helvetica', 'normal');
      const symptomLines = this.doc.splitTextToSize(entry.symptoms, pageWidth - 50);
      this.doc.text(symptomLines, 30, yPosition);
      yPosition += symptomLines.length * 6 + 15;
      
      // Separator line
      if (index < entries.length - 1) {
        this.doc.setLineWidth(0.3);
        this.doc.setDrawColor(220, 220, 220);
        this.doc.line(20, yPosition, pageWidth - 20, yPosition);
        yPosition += 10;
      }
    });
  }

  /**
   * Add footer with medical disclaimer
   */
  private addFooter(): void {
    const pageHeight = this.doc.internal.pageSize.getHeight();
    const pageWidth = this.doc.internal.pageSize.getWidth();
    
    // Medical disclaimer
    this.doc.setFontSize(8);
    this.doc.setFont('helvetica', 'italic');
    this.doc.setTextColor(100, 100, 100);
    
    const disclaimer = 'MEDICAL DISCLAIMER: This report is for informational purposes only and does not replace professional medical advice, diagnosis, or treatment. Always consult your healthcare provider for medical concerns.';
    const disclaimerLines = this.doc.splitTextToSize(disclaimer, pageWidth - 40);
    
    this.doc.text(disclaimerLines, pageWidth / 2, pageHeight - 25, { align: 'center' });
    
    // Page numbering
    const pageCount = this.doc.internal.pages.length - 1;
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.doc.setFontSize(8);
      this.doc.setTextColor(150, 150, 150);
      this.doc.text(`Page ${i} of ${pageCount}`, pageWidth - 30, pageHeight - 10);
    }
  }

  /**
   * Helper methods
   */
  private getTotalEntries(): number {
    return this.doc.internal.pages.length; // Placeholder - should be passed as parameter
  }

  private getSeverityBreakdown(entries: SymptomEntry[]): { mild: number; moderate: number; severe: number } {
    return entries.reduce(
      (acc, entry) => {
        const severity = entry.severity || 'mild';
        acc[severity]++;
        return acc;
      },
      { mild: 0, moderate: 0, severe: 0 }
    );
  }

  private getDateRange(entries: SymptomEntry[]): string {
    if (entries.length === 0) return 'No entries';
    
    const dates = entries.map(entry => entry.timestamp).sort((a, b) => a.getTime() - b.getTime());
    const earliest = dates[0].toLocaleDateString();
    const latest = dates[dates.length - 1].toLocaleDateString();
    
    return earliest === latest ? earliest : `${earliest} - ${latest}`;
  }

  private getTopConcerns(entries: SymptomEntry[]): string[] {
    const concernCount: { [key: string]: number } = {};
    
    entries.forEach(entry => {
      const concern = entry.concern.toLowerCase().trim();
      concernCount[concern] = (concernCount[concern] || 0) + 1;
    });
    
    return Object.entries(concernCount)
      .sort(([, a], [, b]) => b - a)
      .map(([concern]) => concern);
  }

  private getSeverityColor(severity: string): { r: number; g: number; b: number } {
    switch (severity) {
      case 'mild':
        return { r: 34, g: 197, b: 94 }; // Green
      case 'moderate':
        return { r: 251, g: 191, b: 36 }; // Yellow
      case 'severe':
        return { r: 239, g: 68, b: 68 }; // Red
      default:
        return { r: 107, g: 114, b: 128 }; // Gray
    }
  }

  private generateFileName(reportDate: string): string {
    const date = new Date(reportDate).toISOString().split('T')[0];
    return `symptom-report-${date}.pdf`;
  }

  private createShareableUrl(pdfBlob: Blob): string {
    return URL.createObjectURL(pdfBlob);
  }

  /**
   * Download the PDF file
   */
  public downloadPDF(fileName: string): void {
    this.doc.save(fileName);
  }

  /**
   * Get PDF as base64 string for sharing
   */
  public getPDFAsBase64(): string {
    return this.doc.output('datauristring');
  }

  /**
   * Share PDF via Web Share API (if supported)
   */
  public async sharePDF(fileName: string, pdfBlob: Blob): Promise<void> {
    if (navigator.share && navigator.canShare) {
      const file = new File([pdfBlob], fileName, { type: 'application/pdf' });
      
      if (navigator.canShare({ files: [file] })) {
        try {
          await navigator.share({
            title: 'Symptom History Report',
            text: 'Here is my symptom history report generated by MedInsight Hub',
            files: [file]
          });
        } catch (error) {
          console.error('Error sharing PDF:', error);
          // Fallback to download
          this.downloadPDF(fileName);
        }
      } else {
        // Fallback to download
        this.downloadPDF(fileName);
      }
    } else {
      // Fallback to download
      this.downloadPDF(fileName);
    }
  }
}

// Export singleton instance
export const pdfGenerationService = new PDFGenerationService();
